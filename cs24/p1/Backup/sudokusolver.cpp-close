// sudokusolver.cpp
// Kenneth Toombs, Marcellis Carr-Barfield. 10/18/14

#include <iostream>
using namespace std;

#include "sudokugrid.h"
#include "gridio.h"

// mandatory function to define below main:
void solve(SudokuGrid &);

// helper functions for the solve function
void fillCandidate(SudokuGrid& grid);
void fillRow(SudokuGrid& grid);
void fillColumn(SudokuGrid& grid);

// do not change main
int main() {
    int problem[9][9];

    if ( !getProblem(problem) ) {
        cout << "bad input grid; terminating" << endl;
        return 1;
    }

    try {
        SudokuGrid grid(problem); // object, not pointer this time

        cout << "Problem:" << endl;
        display(&grid);           // so pass address to display
        cout << endl;

        solve(grid);

        if (grid.isSolved())
            cout << "Success! Solution:" << endl;
        else
            cout << "Not successful. Best effort:" << endl;

        display(&grid);
    }

    catch(GridException e) {
        cout << "exception: " << e << endl;
    }

    return 0;
}

// attempt to solve the problem using simple logic rules
void solve(SudokuGrid &grid) {

    // TYPE (MOST OR ALL OF) YOUR SOLUTION HERE
    // DECLARE UTILITY FUNCTIONS (IF ANY) HERE OR ABOVE, BUT DEFINE THEM BELOW
  for (int i = 1; i < 51; i++){
    fillCandidate(grid);
    fillRow(grid);
    fillColumn(grid);
  }

}


// a function that fills the sudoku grid cells if there is only one possible candidate
// in that cell

void fillCandidate(SudokuGrid& grid) {
  
  // create a variable to keep track of the number of candidates for each cell
  int canCounter = 0;

  // initialize loop variables
  int i = 0, j = 0, num = 1, canNumber = 0;

  // loop through every cell for every number and use isCandidate function to check
  // if the numbers are candidates. If only one candidate is counted, that number will be
  // put in the cell.
  

  //iterate through rows
  for(i = 0; i < 9; i++){
    
    //iterate through row entries
    for(j = 0; j< 9; j++){
      
      // if the cell in the grid is empty, check to see if the numbers
      // one through nine are candidates
      if (grid.getNumber(i, j) == 0){
      
	// iterate through the numbers one through nine
	for(num = 1; num < 10; num++){
	
	  // if the current number is a candidate for the current cell,
	  // iterate canCounter and record the candidate number.
	  if (grid.isCandidate(num, i, j) == 1){
	  
	    canNumber = num;
	    canCounter++;

	    }

	  }

	// if canCounter is equal to one, place the only possible candidate in
	// the current cell
	if (canCounter == 1 && grid.isCandidate(canNumber, i, j)){
	    
	  grid.setNumber(canNumber, i, j);

	}
	canCounter = 0;
      }

    }

  }
 
  
}

void fillRow(SudokuGrid& grid){

  // initialize loop variables
  int i = 0, j = 0, num = 1, a = 0, canCounter = 0, canIndex = 0;
  int canNums[9] = {-99}; //initialize to a value that can never return true

  // iterate through every row
  for(i = 0; i < 9; i++){
    //reset the array when rows change
    for(int k = 0; k < 9; k++){
      canNums[k] = -99;
    }

    //iterate through every possible number
    for(num = 1; num < 10; num++){

      //if the number doesn't occur in row, place the number in the 
      //array at the proper index
      if(grid.occursInRow(num, i) == 0){
	canNums[num-1] = num;
      }

    }

    //check each row for empty cells
    for(j = 0; j < 9; j++){
      //if the cell is empty, check array values to see if they are the only candidate
      if(grid.getNumber(i,j) == 0){

	
	//iterate through array indexes of possible candidates
	for(a = 0; a < 9; a++){
	  //if the value at the stored index is a candidate, record the index
	  //and increment the candidate counter
	  if(canNums[a] != -1){
	    if(grid.isCandidate(canNums[a], i, j) == 1){
	      canCounter++;
	      canIndex = a;    

	    }
	  }
	  //if only one candidate is possible, set the candidate value to the proper
	  //location in the grid.
	  if(canCounter == 1 && grid.isCandidate(canNums[canIndex], i, j) == 1){
	    
	    grid.setNumber(canNums[canIndex], i, j);
	    canNums[canIndex] = -1;
	      
	  }
	  
	}

      }

    }
    

  }




}

void fillColumn(SudokuGrid& grid){

  // initialize loop variables
  int i = 0, j = 0, num = 1, a = 0, canCounter = 0, canIndex = 0;
  int canNums[9] = {-99}; //initialize to a value that can never return true

  // iterate through every column
  for(j = 0; j < 9; j++){

    //reset the array when columns change
    for(int k = 0; k < 9; k++){
      canNums[k] = -99;
    }

    //iterate through every possible number
    for(num = 1; num < 10; num++){

      //if the number doesn't occur in column, place the number in the 
      //array at the proper index
      if(grid.occursInColumn(num, j) == 0){
	canNums[num-1] = num;
      }

    }

    //check each column for empty cells
    for(i = 0; i < 9; i++){
      //if the cell is empty, check array values to see if they are the only candidate
      if(grid.getNumber(i,j) == 0){

	//iterate through array indexes of possible candidates
	for(a = 0; a < 9; a++){
	  //if the value at the stored index is a candidate, record the index
	  //and increment the candidate counter
	  if(grid.isCandidate(canNums[a], i, j) == 1){
	    canCounter++;
	    canIndex = a;    

	  }
	  //if only one candidate is possible, set the candidate value to the proper
	  //location in the grid.
	  if(canCounter == 1 && grid.isCandidate(canNums[canIndex], i, j) == 1){

	    grid.setNumber(canNums[canIndex], i, j);
	    canNums[canIndex] = -1;
	    
	    
	  }

	}

      }

    }
    

  }




}
